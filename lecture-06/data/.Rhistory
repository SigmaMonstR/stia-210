examp$discont <- (part1 == TRUE | part2 == TRUE )*1
examp$varied <- (part1 == TRUE | part2 == TRUE | part3 == TRUE)*1
plot(examp[,c("x1", "x2")], col= "lightblue", ylab = "", xlab ="",
font.main = 1,  pch = 16, cex = 0.8,
xaxt = "n", yaxt = "n", asp = 1,bty="n")
points(examp[examp$discont == 1, c("x1", "x2")], col= "purple", pch = 16, cex = 0.7)
points(examp[examp$discont == 0, c("x1", "x2")], col= "lightblue", pch = 16, cex = 0.7)
plot(examp[,c("x1", "x2")], col= "lightblue", ylab = "", xlab ="",
font.main = 1,  pch = 16, cex = 0.8,
xaxt = "n", yaxt = "n", asp = 1,bty="n")
points(examp[examp$discont == 1, c("x1", "x2")], col= "purple", pch = 16, cex = 0.7)
points(examp[examp$discont == 0, c("x1", "x2")], col= "lightblue", pch = 16, cex = 0.7)
findThreshold <- function(y, x, step){
#
# Find optimal binary threshold within x for value of y
# choosing from observed values of x
#
# Args:
#   y = target vector
#   x = input vector
#   step = number of thresholds to evaluate, randomly sampled from x
#
# Returns the optimized threshold and split test result
#
#Get min and max
min.val <- min(x, na.rm = T)
max.val <- max(x, na.rm = T)
unis <- unique(x)
unis <- unis[order(unis)]
#Select steps
if(length(unis) > step){
unis <- sample(unis, step)
} else{
unis <- unis[1:(length(unis)-1)]
}
#Tests
test.stat <- data.frame()
for(i in unis){
#Create binary
binary.var <- (x > i)
#Get min cell size
min.count <- min(sum(binary.var == TRUE), sum(binary.var == FALSE))
if(length(unique(binary.var)) == 2){
fit <- lm(y ~ binary.var)
test.stat <- rbind(test.stat,
data.frame(thresh = i,
stat = summary(fit)$fstatistic[1],
n = min.count))
}
}
test.stat <- test.stat[test.stat$n > 0,]
res <- test.stat[test.stat$stat == max(test.stat$stat),]
return(res)
}
#V1
R = matrix(cbind(1,.80, .75,  .80, 1, .6,  .75, .6, 1),nrow=3)
U = t(chol(R))
nvars = dim(U)[1]
numobs = 5000
set.seed(1)
random.normal = matrix(rnorm(nvars*numobs,0,1)*2, nrow=nvars, ncol=numobs);
X = U %*% random.normal
newX = t(X)
raw = as.data.frame(newX)
orig.raw = as.data.frame(t(random.normal))
names(raw) = c("y","x1","x2")
cor(raw)
plot(raw)
raw[,1] <- raw[,1] + 12
raw[,2] <- raw[,2] + 12
raw[,3] <- raw[,3] + 12
raw1 <- raw
#V2
R = matrix(cbind(1,.50, -.8,  .50, 1, -.7,  -.8, -.7, 1),nrow=3)
U = t(chol(R))
nvars = dim(U)[1]
numobs = 5000
set.seed(1)
random.normal = matrix(rnorm(nvars*numobs,0,3), nrow=nvars, ncol=numobs);
X = U %*% random.normal
newX = t(X)
raw = as.data.frame(newX)
orig.raw = as.data.frame(t(random.normal))
names(raw) = c("y","x1","x2")
cor(raw)
raw2 <- rbind(raw, raw1)
plot(raw2)
plot(raw2)
set.seed(234)
examp <- data.frame(x1 = runif(2000), x2 = runif(2000))
examp$linear <- (examp$x1 < examp$x2) * 1
examp$nonlinear <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) -0.1
part1 <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.2
part2 <- examp$x2 >  1.2- ( examp$x1*0.6)
part3 <- examp$x2 >  0.2+ ( examp$x1*1.4)
examp$discont <- (part1 == TRUE | part2 == TRUE )*1
examp$varied <- (part1 == TRUE | part2 == TRUE | part3 == TRUE)*1
#Plots
par(mfrow = c(1,2), mar = c(0, 1.2, 0.9, 0))
plot(examp[,c("x1", "x2")], col= "lightblue", ylab = "", xlab ="",
font.main = 1,  pch = 16, cex = 0.8, xaxt = "n", yaxt = "n", asp = 1,bty="n")
points(examp[examp$discont == 1, c("x1", "x2")], col= "purple", pch = 16, cex = 0.7)
points(examp[examp$discont == 0, c("x1", "x2")], col= "lightblue", pch = 16, cex = 0.7)
plot(examp[,c("x1", "x2")], col= "lightblue", ylab = "", xlab ="",
font.main = 1,  pch = 16, cex = 0.8, xaxt = "n", yaxt = "n", asp = 1,bty="n")
points(examp[examp$discont == 1, c("x1", "x2")], col= "purple", pch = 16, cex = 0.7)
points(examp[examp$discont == 0, c("x1", "x2")], col= "lightblue", pch = 16, cex = 0.7)
points(examp[examp$varied == 1, c("x1", "x2")], col= "purple", pch = 16, cex = 0.7)
plot(examp[,c("x1", "x2")], col= "lightblue", ylab = "", xlab ="",
font.main = 1,  pch = 16, cex = 0.8, xaxt = "n", yaxt = "n", asp = 1,bty="n")
points(examp[examp$varied == 1, c("x1", "x2")], col= "purple", pch = 16, cex = 0.7)
points(examp[examp$varied == 0, c("x1", "x2")], col= "lightblue", pch = 16, cex = 0.7)
set.seed(234)
examp <- data.frame(x1 = runif(2000), x2 = runif(2000))
examp$linear <- (examp$x1 < examp$x2) * 1
examp$nonlinear <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) -0.1
part1 <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.2
part2 <- examp$x2 >  1.2- ( examp$x1*0.6)
part3 <- examp$x2 >  0.2+ ( examp$x1*1.4)
part1a <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.3
part2a <- examp$x2 >  1.1- ( examp$x1*0.6)
part3a <- examp$x2 >  0.3 + ( examp$x1*1.4)
examp$discont <- (part1 == TRUE | part2 == TRUE )*1
examp$varied <- (part1 == TRUE | part2 == TRUE | part3 == TRUE |
part1a == TRUE | part2a == TRUE | part3a == TRUE)*1
#Plots
par(mfrow = c(1,2), mar = c(0, 1.2, 0.9, 0))
plot(examp[,c("x1", "x2")], col= "lightblue", ylab = "", xlab ="",
font.main = 1,  pch = 16, cex = 0.8, xaxt = "n", yaxt = "n", asp = 1,bty="n")
points(examp[examp$varied == 1, c("x1", "x2")], col= "purple", pch = 16, cex = 0.7)
points(examp[examp$varied == 0, c("x1", "x2")], col= "lightblue", pch = 16, cex = 0.7)
Base data
set.seed(234)
examp <- data.frame(x1 = runif(2000), x2 = runif(2000))
examp$linear <- (examp$x1 < examp$x2) * 1
examp$nonlinear <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) -0.1
part1 <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.2
part2 <- examp$x2 >  1.2- ( examp$x1*0.6)
part3 <- examp$x2 >  0.2+ ( examp$x1*1.4)
part1a <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.3
part2a <- examp$x2 >  1.1- ( examp$x1*0.6)
part3a <- examp$x2 >  0.3 + ( examp$x1*1.4)
examp$discont <- (part1 == TRUE | part2 == TRUE )*1
examp$varied <- (part1 == TRUE & part2 == TRUE & part3 == TRUE &
part1a == TRUE & part2a == TRUE & part3a == TRUE)*1
#Plots
par(mfrow = c(1,2), mar = c(0, 1.2, 0.9, 0))
plot(examp[,c("x1", "x2")], col= "lightblue", ylab = "", xlab ="",
font.main = 1,  pch = 16, cex = 0.8, xaxt = "n", yaxt = "n", asp = 1,bty="n")
points(examp[examp$varied == 1, c("x1", "x2")], col= "purple", pch = 16, cex = 0.7)
points(examp[examp$varied == 0, c("x1", "x2")], col= "lightblue", pch = 16, cex = 0.7)
set.seed(234)
examp <- data.frame(x1 = runif(2000), x2 = runif(2000))
examp$linear <- (examp$x1 < examp$x2) * 1
examp$nonlinear <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) -0.1
part1 <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.2
part2 <- examp$x2 >  1.2- ( examp$x1*0.6)
part3 <- examp$x2 >  0.2+ ( examp$x1*1.4)
part1a <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.3
part2a <- examp$x2 >  1.1- ( examp$x1*0.6)
part3a <- examp$x2 >  0.3 + ( examp$x1*1.4)
examp$discont <- (part1 == TRUE | part2 == TRUE )*1
examp$varied <- (part1 == TRUE | part2 == TRUE | part3 == TRUE |
part1a == TRUE | part2a == TRUE | part3a == TRUE)*1
#Plots
par(mfrow = c(1,2), mar = c(0, 1.2, 0.9, 0))
plot(examp[,c("x1", "x2")], col= "lightblue", ylab = "", xlab ="",
font.main = 1,  pch = 16, cex = 0.8, xaxt = "n", yaxt = "n", asp = 1,bty="n")
points(examp[examp$varied == 1, c("x1", "x2")], col= "purple", pch = 16, cex = 0.7)
points(examp[examp$varied == 0, c("x1", "x2")], col= "lightblue", pch = 16, cex = 0.7)
examp <- data.frame(x1 = runif(2000), x2 = runif(2000))
examp$linear <- (examp$x1 < examp$x2) * 1
examp$nonlinear <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) -0.1
part1 <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.2
part2 <- examp$x2 >  1.2- ( examp$x1*0.6)
part3 <- examp$x2 >  0.2+ ( examp$x1*1.4)
part1a <- examp$x1 > ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.3
part2a <- examp$x2 <  1.1- ( examp$x1*0.6)
part3a <- examp$x2 <  0.3 + ( examp$x1*1.4)
examp$discont <- (part1 == TRUE | part2 == TRUE )*1
examp$varied <- (part1 == TRUE | part2 == TRUE | part3 == TRUE |
part1a == TRUE | part2a == TRUE | part3a == TRUE)*1
#Plots
par(mfrow = c(1,2), mar = c(0, 1.2, 0.9, 0))
plot(examp[,c("x1", "x2")], col= "lightblue", ylab = "", xlab ="",
font.main = 1,  pch = 16, cex = 0.8, xaxt = "n", yaxt = "n", asp = 1,bty="n")
points(examp[examp$varied == 1, c("x1", "x2")], col= "purple", pch = 16, cex = 0.7)
points(examp[examp$varied == 0, c("x1", "x2")], col= "lightblue", pch = 16, cex = 0.7)
set.seed(234)
examp <- data.frame(x1 = runif(2000), x2 = runif(2000))
examp$linear <- (examp$x1 < examp$x2) * 1
examp$nonlinear <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) -0.1
part1 <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.2
part2 <- examp$x2 >  1.2- ( examp$x1*0.6)
part3 <- examp$x2 >  0.2+ ( examp$x1*1.4)
part1a <- examp$x1 > ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.3
part2a <- examp$x2 <  1.3- ( examp$x1*0.6)
part3a <- examp$x2 <  0.3 + ( examp$x1*1.4)
examp$discont <- (part1 == TRUE | part2 == TRUE )*1
examp$varied <- (part1 == TRUE | part2 == TRUE | part3 == TRUE |
part1a == TRUE | part2a == TRUE | part3a == TRUE)*1
#Plots
par(mfrow = c(1,2), mar = c(0, 1.2, 0.9, 0))
plot(examp[,c("x1", "x2")], col= "lightblue", ylab = "", xlab ="",
font.main = 1,  pch = 16, cex = 0.8, xaxt = "n", yaxt = "n", asp = 1,bty="n")
points(examp[examp$varied == 1, c("x1", "x2")], col= "purple", pch = 16, cex = 0.7)
points(examp[examp$varied == 0, c("x1", "x2")], col= "lightblue", pch = 16, cex = 0.7)
set.seed(234)
examp <- data.frame(x1 = runif(2000), x2 = runif(2000))
examp$linear <- (examp$x1 < examp$x2) * 1
examp$nonlinear <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) -0.1
part1 <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.2
part2 <- examp$x2 >  1.2- ( examp$x1*0.6)
part3 <- examp$x2 >  0.2+ ( examp$x1*1.4)
part1a <- examp$x1 > ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.3
part2a <- examp$x2 <  1.3- ( examp$x1*0.6)
part3a <- examp$x2 <  0.3 + ( examp$x1*1.4)
examp$discont <- (part1 == TRUE | part2 == TRUE )*1
examp$varied <- (part1 == TRUE | part2 == TRUE | part3 == TRUE &
part1a == TRUE & part2a == TRUE & part3a == TRUE)*1
#Plots
par(mfrow = c(1,2), mar = c(0, 1.2, 0.9, 0))
plot(examp[,c("x1", "x2")], col= "lightblue", ylab = "", xlab ="",
font.main = 1,  pch = 16, cex = 0.8, xaxt = "n", yaxt = "n", asp = 1,bty="n")
points(examp[examp$varied == 1, c("x1", "x2")], col= "purple", pch = 16, cex = 0.7)
points(examp[examp$varied == 0, c("x1", "x2")], col= "lightblue", pch = 16, cex = 0.7)
set.seed(234)
examp <- data.frame(x1 = runif(2000), x2 = runif(2000))
examp$linear <- (examp$x1 < examp$x2) * 1
examp$nonlinear <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) -0.1
part1 <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.2
part2 <- examp$x2 >  1.2- ( examp$x1*0.6)
part3 <- examp$x2 >  0.2+ ( examp$x1*1.4)
part1a <- examp$x1 > ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.3
part2a <- examp$x2 <  1.3- ( examp$x1*0.6)
part3a <- examp$x2 <  0.1 + ( examp$x1*1.4)
examp$discont <- (part1 == TRUE | part2 == TRUE )*1
examp$varied <- (part1 == TRUE | part2 == TRUE | part3 == TRUE &
part1a == TRUE & part2a == TRUE & part3a == TRUE)*1
#Plots
par(mfrow = c(1,2), mar = c(0, 1.2, 0.9, 0))
plot(examp[,c("x1", "x2")], col= "white", ylab = "", xlab ="",
font.main = 1,  pch = 16, cex = 0.8, xaxt = "n", yaxt = "n", asp = 1,bty="n")
points(examp[examp$varied == 1, c("x1", "x2")], col= "purple", pch = 16, cex = 0.7)
points(examp[examp$varied == 0, c("x1", "x2")], col= "lightblue", pch = 16, cex = 0.7)
set.seed(234)
examp <- data.frame(x1 = runif(2000), x2 = runif(2000))
examp$linear <- (examp$x1 < examp$x2) * 1
examp$nonlinear <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) -0.1
part1 <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.2
part2 <- examp$x2 >  1.2- ( examp$x1*0.6)
part3 <- examp$x2 >  0.2+ ( examp$x1*1.4)
part1a <- examp$x1 > ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.3
part2a <- examp$x2 <  1.1- ( examp$x1*0.6)
part3a <- examp$x2 <  0.3 + ( examp$x1*1.4)
examp$discont <- (part1 == TRUE | part2 == TRUE )*1
examp$varied <- (part1 == TRUE | part2 == TRUE | part3 == TRUE &
part1a == TRUE & part2a == TRUE & part3a == TRUE)*1
#Plots
par(mfrow = c(1,2), mar = c(0, 1.2, 0.9, 0))
plot(examp[,c("x1", "x2")], col= "white", ylab = "", xlab ="",
font.main = 1,  pch = 16, cex = 0.8, xaxt = "n", yaxt = "n", asp = 1,bty="n")
points(examp[examp$varied == 1, c("x1", "x2")], col= "purple", pch = 16, cex = 0.7)
points(examp[examp$varied == 0, c("x1", "x2")], col= "lightblue", pch = 16, cex = 0.7)
set.seed(234)
examp <- data.frame(x1 = runif(2000), x2 = runif(2000))
examp$linear <- (examp$x1 < examp$x2) * 1
examp$nonlinear <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) -0.1
part1 <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.2
part2 <- examp$x2 >  1.2- ( examp$x1*0.6)
part3 <- examp$x2 >  0.2+ ( examp$x1*1.4)
part1a <- examp$x1 > ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.3
part2a <- examp$x2 <  1.5 - ( examp$x1*0.6)
part3a <- examp$x2 <  0.3 + ( examp$x1*1.4)
examp$discont <- (part1 == TRUE | part2 == TRUE )*1
examp$varied <- (part1 == TRUE | part2 == TRUE | part3 == TRUE &
(part1a == TRUE & part2a == TRUE & part3a == TRUE))*1
#Plots
par(mfrow = c(1,2), mar = c(0, 1.2, 0.9, 0))
plot(examp[,c("x1", "x2")], col= "lightblue", ylab = "", xlab ="",
font.main = 1,  pch = 16, cex = 0.8, xaxt = "n", yaxt = "n", asp = 1,bty="n")
points(examp[examp$varied == 1, c("x1", "x2")], col= "purple", pch = 16, cex = 0.7)
points(examp[examp$varied == 0, c("x1", "x2")], col= "lightblue", pch = 16, cex = 0.7)
set.seed(234)
examp <- data.frame(x1 = runif(2000), x2 = runif(2000))
examp$linear <- (examp$x1 < examp$x2) * 1
examp$nonlinear <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) -0.1
part1 <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.2
part2 <- examp$x2 >  1.2- ( examp$x1*0.6)
part3 <- examp$x2 >  0.2+ ( examp$x1*1.4)
part1a <- examp$x1 > ( examp$x2 * 4 - 6*examp$x2^2 + 2*examp$x2^3) +0.1
part2a <- examp$x2 <  1.5 - ( examp$x1*0.6)
part3a <- examp$x2 <  0.3 + ( examp$x1*1.4)
examp$discont <- (part1 == TRUE | part2 == TRUE )*1
examp$varied <- (part1 == TRUE | part2 == TRUE | part3 == TRUE &
(part1a == TRUE & part2a == TRUE & part3a == TRUE))*1
#Plots
par(mfrow = c(1,2), mar = c(0, 1.2, 0.9, 0))
plot(examp[,c("x1", "x2")], col= "lightblue", ylab = "", xlab ="",
font.main = 1,  pch = 16, cex = 0.8, xaxt = "n", yaxt = "n", asp = 1,bty="n")
points(examp[examp$varied == 1, c("x1", "x2")], col= "purple", pch = 16, cex = 0.7)
points(examp[examp$varied == 0, c("x1", "x2")], col= "lightblue", pch = 16, cex = 0.7)
#Base data
set.seed(234)
examp <- data.frame(x1 = runif(2000), x2 = runif(2000))
examp$linear <- (examp$x1 < examp$x2) * 1
examp$nonlinear <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) -0.1
part1 <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.2
part2 <- examp$x2 >  1.2- ( examp$x1*0.6)
part3 <- examp$x2 >  0.2+ ( examp$x1*1.4)
part1a <- examp$x1 > ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.1
part2a <- examp$x2 <  1.5 - ( examp$x1*0.6)
part3a <- examp$x2 <  0.3 + ( examp$x1*1.4)
examp$discont <- (part1 == TRUE | part2 == TRUE )*1
examp$varied <- (part1 == TRUE | part2 == TRUE | part3 == TRUE &
(part1a == TRUE & part2a == TRUE & part3a == TRUE))*1
#Plots
par(mfrow = c(1,2), mar = c(0, 1.2, 0.9, 0))
plot(examp[,c("x1", "x2")], col= "lightblue", ylab = "", xlab ="",
font.main = 1,  pch = 16, cex = 0.8, xaxt = "n", yaxt = "n", asp = 1,bty="n")
points(examp[examp$varied == 1, c("x1", "x2")], col= "purple", pch = 16, cex = 0.7)
points(examp[examp$varied == 0, c("x1", "x2")], col= "lightblue", pch = 16, cex = 0.7)
set.seed(234)
examp <- data.frame(x1 = runif(2000), x2 = runif(2000))
examp$linear <- (examp$x1 < examp$x2) * 1
examp$nonlinear <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) -0.1
part1 <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.2
part2 <- examp$x2 >  1.2- ( examp$x1*0.6)
part3 <- examp$x2 >  0.2+ ( examp$x1*1.4)
part1a <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.1
part2a <- examp$x2 <  1.5 - ( examp$x1*0.6)
part3a <- examp$x2 <  0.3 + ( examp$x1*1.4)
examp$discont <- (part1 == TRUE | part2 == TRUE )*1
examp$varied <- (part1 == TRUE | part2 == TRUE | part3 == TRUE &
(part1a == TRUE & part2a == TRUE & part3a == TRUE))*1
#Plots
par(mfrow = c(1,2), mar = c(0, 1.2, 0.9, 0))
plot(examp[,c("x1", "x2")], col= "lightblue", ylab = "", xlab ="",
font.main = 1,  pch = 16, cex = 0.8, xaxt = "n", yaxt = "n", asp = 1,bty="n")
points(examp[examp$varied == 1, c("x1", "x2")], col= "purple", pch = 16, cex = 0.7)
points(examp[examp$varied == 0, c("x1", "x2")], col= "lightblue", pch = 16, cex = 0.7)
#Base data
set.seed(234)
examp <- data.frame(x1 = runif(2000), x2 = runif(2000))
examp$linear <- (examp$x1 < examp$x2) * 1
examp$nonlinear <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) -0.1
part1 <- examp$x1 < ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.2
part2 <- examp$x2 >  1.2- ( examp$x1*0.6)
part3 <- examp$x2 >  0.2+ ( examp$x1*1.4)
part1a <- examp$x1 > ( examp$x2 * 4 - 8*examp$x2^2 + 2*examp$x2^3) +0.1
part2a <- examp$x2 <  1.5 - ( examp$x1*0.6)
part3a <- examp$x2 <  0.3 + ( examp$x1*1.4)
examp$discont <- (part1 == TRUE | part2 == TRUE )*1
examp$varied <- (part1 == TRUE | part2 == TRUE | part3 == TRUE &
(part1a == TRUE & part2a == TRUE & part3a == TRUE))*1
#Plots
par(mfrow = c(1,2), mar = c(0, 1.2, 0.9, 0))
plot(examp[,c("x1", "x2")], col= "lightblue", ylab = "", xlab ="",
font.main = 1,  pch = 16, cex = 0.8, xaxt = "n", yaxt = "n", asp = 1,bty="n")
points(examp[examp$varied == 1, c("x1", "x2")], col= "purple", pch = 16, cex = 0.7)
points(examp[examp$varied == 0, c("x1", "x2")], col= "lightblue", pch = 16, cex = 0.7)
v
#Base data
#Var 1
R = matrix(cbind(1,.80, .75,  .80, 1, .6,  .75, .6, 1),nrow=3)
U = t(chol(R))
nvars = dim(U)[1]
numobs = 5000
set.seed(1)
random.normal = matrix(rnorm(nvars*numobs,0,1)*2, nrow=nvars, ncol=numobs);
X = U %*% random.normal
newX = t(X)
raw = as.data.frame(newX)
orig.raw = as.data.frame(t(random.normal))
names(raw) = c("y","x1","x2")
cor(raw)
raw[,1] <- raw[,1] + 12
raw[,2] <- raw[,2] + 12
raw[,3] <- raw[,3] + 12
raw1 <- raw
#Var 2
R = matrix(cbind(1,.50, -.8,  .50, 1, -.7,  -.8, -.7, 1),nrow=3)
U = t(chol(R))
nvars = dim(U)[1]
numobs = 5000
set.seed(1)
random.normal = matrix(rnorm(nvars*numobs,0,3), nrow=nvars, ncol=numobs);
X = U %*% random.normal
newX = t(X)
raw = as.data.frame(newX)
orig.raw = as.data.frame(t(random.normal))
names(raw) = c("y","x1","x2")
cor(raw)
raw2 <- rbind(raw, raw1)
#Example data
rand <- runif(nrow(raw2)) > 0.7
train <- raw2[rand,]
test <- raw2[!rand,]
plot(test[, c("y", "x2")], col = "grey", pch = 15)
points(yhat, test$x2, col = "red", pch = 15)
#Base data
#Var 1
R = matrix(cbind(1,.80, .75,  .80, 1, .6,  .75, .6, 1),nrow=3)
U = t(chol(R))
nvars = dim(U)[1]
numobs = 5000
set.seed(1)
random.normal = matrix(rnorm(nvars*numobs,0,1)*2, nrow=nvars, ncol=numobs);
X = U %*% random.normal
newX = t(X)
raw = as.data.frame(newX)
orig.raw = as.data.frame(t(random.normal))
names(raw) = c("y","x1","x2")
cor(raw)
raw[,1] <- raw[,1] + 12
raw[,2] <- raw[,2] + 12
raw[,3] <- raw[,3] + 12
raw1 <- raw
#Var 2
R = matrix(cbind(1,.50, -.8,  .50, 1, -.7,  -.8, -.7, 1),nrow=3)
U = t(chol(R))
nvars = dim(U)[1]
numobs = 5000
set.seed(1)
random.normal = matrix(rnorm(nvars*numobs,0,3), nrow=nvars, ncol=numobs);
X = U %*% random.normal
newX = t(X)
raw = as.data.frame(newX)
orig.raw = as.data.frame(t(random.normal))
names(raw) = c("y","x1","x2")
cor(raw)
raw2 <- rbind(raw, raw1)
#Example data
rand <- runif(nrow(raw2)) > 0.7
train <- raw2[rand,]
test <- raw2[!rand,]
plot(test[, c("y", "x2")], col = "grey", pch = 15)
points(yhat, test$x2, col = "red", pch = 15)
plot(test[, c("y", "x2")], col = "grey", pch = 15)
points(yhat, test$x2, col = "red", pch = 15)
plot(test[, c("x2", "y")], col = "grey", pch = 15)
par(mfrow = c(1,2), mar = c(0, 1.2, 0.9, 0))
plot(test[, c("x2", "y")], col = "red", pch = 15, cex = 0.9)
plot(test[, c("x1", "y")], col = "red", pch = 15, cex = 0.9)
#Base data
#Var 1
R = matrix(cbind(1,.80, .75,  .80, 1, .6,  .75, .6, 1),nrow=3)
U = t(chol(R))
nvars = dim(U)[1]
numobs = 5000
set.seed(1)
random.normal = matrix(rnorm(nvars*numobs,0,1)*2, nrow=nvars, ncol=numobs);
X = U %*% random.normal
newX = t(X)
raw = as.data.frame(newX)
orig.raw = as.data.frame(t(random.normal))
names(raw) = c("y","x1","x2")
cor(raw)
raw[,1] <- raw[,1] + 12
raw[,2] <- raw[,2] + 12
raw[,3] <- raw[,3] + 12
raw1 <- raw
#Var 2
R = matrix(cbind(1,.50, -.8,  .50, 1, -.7,  -.8, -.7, 1),nrow=3)
U = t(chol(R))
nvars = dim(U)[1]
numobs = 5000
set.seed(1)
random.normal = matrix(rnorm(nvars*numobs,0,3), nrow=nvars, ncol=numobs);
X = U %*% random.normal
newX = t(X)
raw = as.data.frame(newX)
orig.raw = as.data.frame(t(random.normal))
names(raw) = c("y","x1","x2")
cor(raw)
raw2 <- rbind(raw, raw1)
#Example data
rand <- runif(nrow(raw2)) > 0.7
train <- raw2[rand,]
test <- raw2[!rand,]
#Plot the data
par(mfrow = c(1,2), mar = c(0, 1.2, 0.9, 0))
plot(test[, c("x2", "y")], col = "red", pch = 15, cex = 0.9, main = "y vs. x2")
plot(test[, c("x1", "y")], col = "red", pch = 15, cex = 0.9, main = "y vs. x1")
findThreshold(train$y, train$x1, 1)
findThreshold(train$y, train$x1, 100)
findThreshold(train$y, train$x1, 1)
findThreshold(train$y, train$x1, 100)
findThreshold(train$y, train$x1, 100)
compThreshold <- function(y, xmat, step){
#
# Compare split tests across variables in a matrix
#
# Args:
#   y = target vector
#   xmat = input feature matrix
#   step = number of thresholds to evaluate, randomly sampled from x
#
# Compares best split across all input features and recommends best fit
#
comp <- data.frame()
for(i in 1:ncol(xmat)){
temp <- findThreshold(y, xmat[,i], step )
if(!is.na(temp$thresh) || !is.infinite(abs(temp$thresh)) || length(temp$thresh) == 0){
temp$criteria <- paste0("[df]",colnames(xmat)[i], " > ", temp$thresh[1])
comp <- rbind(comp, temp)
}
}
comp <- comp[comp$thresh == max(comp$thresh), "criteria"]
return(comp)
}
compThreshold(train$y, train[,2:3], 100)
