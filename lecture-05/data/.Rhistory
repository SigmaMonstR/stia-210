gclos <- ggplot(data = odds.close,aes(odds.close$level, odds.close$prop,
color = odds.close$Models, group = odds.close$Models)) +
theme_bw() + theme(aspect.ratio = 0.37) +
geom_line(size = 1.5) + ggtitle("Unscheduled Closures by Risk Tier") +
labs(x = "Risk Tier", y = "% unscheduled closure", color = "Models") +
scale_x_continuous(breaks = seq(-1, 10, by = 1))  +
scale_y_continuous(limits = c(0,65))  +
theme(title = element_text(size=9, hjust=0.5))  +
geom_point(aes(x = odds.close$level, y = odds.close$toplab))    +
geom_text(aes(label=round(odds.close$toplab,1)),hjust=0.5, vjust=-1)
ggsave("closure_risk.png")
#odds table
odds.comb.pre <- odds[odds$model == "pr.avg", c(2,3)]
odds.comb.pre$odds.fatal <- odds.comb.pre$prop/min(odds.comb.pre$prop)
odds.comb.pre.close <- odds.close[odds.close$model == "pr.avg", c(2,3)]
odds.comb.pre.close$odds.close <- odds.comb.pre.close$prop/min(odds.comb.pre.close$prop)
odds.comb <- cbind(odds.comb.pre, odds.comb.pre.close[,c(2:3)])
#Table on probs by model
kable(wide, booktab = TRUE,  format = "latex",
col.names = c("Outcome","Grad. Boost","ADA","Logistic", "GAM", "Ensemble"),
caption = "Probabilities by outcome: Mean and SE",
row.names = FALSE) %>%
kable_styling( full_width = F, latex_options = "hold_position") %>%
add_header_above(c(" " = 1, "Tree-Based Models" = 2, "Additive Models" = 2))
#metrics
f.test <- fatals[fatals$fold == "test",]
f.tier1.n <- sum(as.vector(f.test[f.test$stand.pr.avg == 1, "binary.fatal"]))
f.tier1.rate <- round(100*f.tier1.n/nrow(f.test[f.test$stand.pr.avg == 1,]),1)
f.tier1.prop <- round(100*nrow(f.test[f.test$stand.pr.avg == 1,])/nrow(f.test),1)
f.tier5.n <- sum(as.vector(f.test[f.test$stand.pr.avg == 5, "binary.fatal"]))
f.tier5.rate <- round(100*f.tier5.n/nrow(f.test[f.test$stand.pr.avg == 5,]))
f.tier5.prop <- round(100*nrow(f.test[f.test$stand.pr.avg == 5,])/nrow(f.test),2)
f.odds <- round(f.tier5.rate/f.tier1.rate)
f.tierg1.n <- sum(as.vector(f.test[f.test$stand.pr.avg > 1, "binary.fatal"]))
f.tierg1.rate <- round(100*f.tierg1.n/nrow(f.test[f.test$stand.pr.avg > 1,]),1)
f.tierg1.prop <- round(100*f.tierg1.n/sum(as.vector(f.test[, "binary.fatal"])))
#metrics
f.test <- close[close$fold == "test",]
f.tier1.n <- sum(as.vector(f.test[f.test$stand.pr.avg == 1, "binary.close"]))
f.tier1.rate <- round(100*f.tier1.n/nrow(f.test[f.test$stand.pr.avg == 1,]),1)
f.tier1.prop <- round(100*nrow(f.test[f.test$stand.pr.avg == 1,])/nrow(f.test),1)
f.tier5.n <- sum(as.vector(f.test[f.test$stand.pr.avg == 5, "binary.close"]))
f.tier5.rate <- round(100*f.tier5.n/nrow(f.test[f.test$stand.pr.avg == 5,]),1)
f.tier5.prop <- round(100*nrow(f.test[f.test$stand.pr.avg == 5,])/nrow(f.test),1)
f.odds <- round(f.tier5.rate/f.tier1.rate)
f.tierg1.n <- sum(as.vector(f.test[f.test$stand.pr.avg > 1, "binary.close"]))
f.tierg1.rate <- round(100*f.tierg1.n/nrow(f.test[f.test$stand.pr.avg > 1,]),1)
f.tierg1.prop <- round(100*f.tierg1.n/sum(as.vector(f.test[, "binary.close"])))
#Table on probs by model
kable(odds.comb, booktab = TRUE,  format = "latex",
col.names =  c("Risk Tier", "% Fatal", "Odds Relative to Tier 1", "% Closed", "Odds Relative to Tier 1"),
caption = "Outcomes by risk tier", digits = 2,
row.names = FALSE) %>%
kable_styling( full_width = F, latex_options = "hold_position") %>%
add_header_above(c(" " = 1, "Fatalities Indexs" = 2, "School Closure Index" = 2))
#SET UP FOR MOST CLOSURE AND FATALS
#Most closures
test.close <- close[close$fold == "test",]
a1 <- aggregate(test.close$binary.close, by = list(test.close$alldates), FUN = sum)
a1 <- a1[order(-a1$x),1]
#Most Fatals
test.fatal <- fatals[fatals$fold == "test",]
a2 <- aggregate(test.fatal$binary.fatal, by = list(test.fatal$alldates), FUN = sum)
a2 <- a2[order(-a2$x),1]
#Set up maps
usa <- map_data("usa")
max.fatal <- max(fatals$stand.pr.avg)
min.fatal <- min(fatals$stand.pr.avg)
max.close <- max(close$stand.pr.avg)
min.close <- min(close$stand.pr.avg)
#Render Fatals
b1 <- test.fatal[test.fatal$alldates == a2[1], ]
fatal.pred1 <- ggplot(b1, aes(INTPTLONG, INTPTLAT)) +
geom_polygon(data = usa, aes(x=long, y = lat, group = group), fill = "grey90")  +
geom_point(size = 0.3,aes(color = (stand.pr.avg)), shape=15) +
ggtitle(paste0("(3) Most Fatalities - Index: ", a2[1])) +
coord_fixed(1.2) + labs(x = "Longitude", y = "Latitude", color = "Index") +
scale_colour_gradient(low = "grey", high="darkred",
limits = c(min.fatal, max.fatal),
breaks = seq(min.fatal,max.fatal,1),
labels = c(min.fatal,rep("",max.fatal - min.fatal -1), max.fatal))  +
theme( axis.text=element_blank(),legend.key.size = unit(0.3, "cm"), axis.line=element_blank(),axis.ticks=element_blank(),
axis.title=element_blank(), plot.title = element_text(size=9), legend.text = element_text(size=9),
legend.title=element_text(size=9), panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
ggsave("ftl_pred.png")
fatal.actual1 <- ggplot(b1, aes(INTPTLONG, INTPTLAT)) +
geom_polygon(data = usa, aes(x=long, y = lat, group = group), fill = "grey90")  +
geom_point(size = 0.3,aes(color = binary.fatal), shape=15) +
theme(panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank()) +
ggtitle(paste0("Actual Fatality Days - ", a2[1])) +
coord_fixed(1.2) + labs(x = "Longitude", y = "Latitude", color = "Index") +
scale_colour_gradient(low = "grey", high="darkred",
limits = c(0,1),
breaks = c(0,1),
labels = c(0,1))  +
theme( axis.text.x=element_blank(),legend.key.size = unit(0.3, "cm"), axis.text.y=element_blank(),axis.line=element_blank(),axis.ticks.y=element_blank(),
axis.ticks.x=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank(),
plot.title = element_text(size=9), legend.text = element_text(size=9),
legend.title=element_text(size=9),   panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
ggsave("ftl_act.png")
#Render closures
b2 <- test.close[test.close$alldates == a1[1], ]
close.pred1 <- ggplot(b2, aes(INTPTLONG, INTPTLAT)) +
geom_polygon(data = usa, aes(x=long, y = lat, group = group), fill = "grey90")  +
geom_point(size = 0.3, aes(color = (stand.pr.avg)), shape=15) +
ggtitle(paste0("(1) Most School Closures - Index: ", a1[1])) +
coord_fixed(1.2) + labs(x = "Longitude", y = "Latitude", color = "Index") +
scale_colour_gradient(low = "grey", high="darkblue",
limits = c(min.close, max.close),
breaks = seq(min.close,max.close,1),
labels = c(min.close,rep("",max.close-min.close-1), max.close)) +
theme( axis.text.x=element_blank(), legend.key.size = unit(0.3, "cm"), axis.text.y=element_blank(),axis.line=element_blank(),axis.ticks.y=element_blank(),
axis.ticks.x=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank(),
plot.title = element_text(size=9), legend.text = element_text(size=9),
legend.title=element_text(size=9),   panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
ggsave("cls_pred.png")
close.actual1 <- ggplot(b2, aes(INTPTLONG, INTPTLAT)) +
geom_polygon(data = usa, aes(x=long, y = lat, group = group), fill = "grey90")  +
geom_point(size = 0.3, aes(color = binary.close), shape=15) +
ggtitle(paste0("Actual School Closures - ", a1[1])) +
coord_fixed(1.2) + labs(x = "Longitude", y = "Latitude", color = "Index") +
scale_colour_gradient(low = "grey", high="darkblue",
limits = c(0, 1),
breaks = seq(0,1,1),
labels = c(0,1)) +
theme( axis.text.x=element_blank(), legend.key.size = unit(0.3, "cm"), axis.text.y=element_blank(),axis.line=element_blank(),axis.ticks.y=element_blank(),
axis.ticks.x=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank(),
plot.title = element_text(size=9), legend.text = element_text(size=9),
legend.title=element_text(size=9),   panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
ggsave("cls_act.png")
margin = theme(plot.margin = unit(c(0,0,0,0), "cm"))
#Eval Tables
#table(b2$binary.close, b2$stand.pr.avg)
#table(b1$binary.fatal, b1$stand.pr.avg)
fpr.fatal1 <- round(100*sum(b1$binary.fatal==0 & b1$stand.pr.avg > 1)/sum((b1$binary.fatal==0)), 1)
tpr.fatal1 <- round(100*sum(b1$binary.fatal==1 & b1$stand.pr.avg > 1)/sum((b1$binary.fatal==1)), 1)
fpr.close1 <-  round(100*sum(b2$binary.close==0 & b2$stand.pr.avg > 1)/sum((b2$binary.close==0)), 1)
tpr.close1 <-  round(100*sum(b2$binary.close==1 & b2$stand.pr.avg > 1)/sum((b2$binary.close==1)), 1)
#Most closures
test.close <- close[close$fold == "test",]
a1 <- aggregate(test.close$binary.close ==0, by = list(test.close$alldates), FUN = sum)
a1 <- a1[order(-a1$x),1]
#Most Fatals
test.fatal <- fatals[fatals$fold == "test",]
a2 <- aggregate(test.fatal$binary.fatal ==0, by = list(test.fatal$alldates), FUN = sum)
a2 <- a2[order(-a2$x),1]
#Set up maps
usa <- map_data("usa")
max.fatal <- max(fatals$stand.pr.avg)
min.fatal <- min(fatals$stand.pr.avg)
max.close <- max(close$stand.pr.avg)
min.close <- min(close$stand.pr.avg)
#Render Fatals
b1 <- test.fatal[test.fatal$alldates == a2[1], ]
fatal.pred <- ggplot(b1, aes(INTPTLONG, INTPTLAT)) +
geom_polygon(data = usa, aes(x=long, y = lat, group = group), fill = "grey90")  +
geom_point(size = 0.3,aes(color = (stand.pr.avg)), shape=15) +
ggtitle(paste0("(4) Non-Event Day - Fatalities Index: ", a2[1])) +
coord_fixed(1.2) + labs(x = "Longitude", y = "Latitude", color = "Index") +
scale_colour_gradient(low = "grey", high="darkred",
limits = c(min.fatal, max.fatal),
breaks = seq(min.fatal,max.fatal,1),
labels = c(min.fatal,rep("",max.fatal - min.fatal -1), max.fatal))  +
theme( axis.text=element_blank(),legend.key.size = unit(0.3, "cm"), axis.line=element_blank(),axis.ticks=element_blank(),
axis.title=element_blank(), plot.title = element_text(size=9), legend.text = element_text(size=9),
legend.title=element_text(size=9), panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
ggsave("ftl_pred.png")
fatal.actual <- ggplot(b1, aes(INTPTLONG, INTPTLAT)) +
geom_polygon(data = usa, aes(x=long, y = lat, group = group), fill = "grey90")  +
geom_point(size = 0.3,aes(color = binary.fatal), shape=15) +
theme(panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank()) +
ggtitle(paste0("Actual Fatality Days - ", a2[1])) +
coord_fixed(1.2) + labs(x = "Longitude", y = "Latitude", color = "Index") +
scale_colour_gradient(low = "grey", high="darkred",
limits = c(0,1),
breaks = c(0,1),
labels = c(0,1))  +
theme( axis.text.x=element_blank(),legend.key.size = unit(0.3, "cm"), axis.text.y=element_blank(),axis.line=element_blank(),axis.ticks.y=element_blank(),
axis.ticks.x=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank(),
plot.title = element_text(size=9), legend.text = element_text(size=9),
legend.title=element_text(size=9),   panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
ggsave("ftl_act.png")
#Render close
b2 <- test.close[test.close$alldates == a1[1], ]
close.pred <- ggplot(b2, aes(INTPTLONG, INTPTLAT)) +
geom_polygon(data = usa, aes(x=long, y = lat, group = group), fill = "grey90")  +
geom_point(size = 0.3, aes(color = (stand.pr.avg)), shape=15) +
ggtitle(paste0("(2) Non-Event Day - Closures Index: ", a1[1])) +
coord_fixed(1.2) + labs(x = "Longitude", y = "Latitude", color = "Index") +
scale_colour_gradient(low = "grey", high="darkblue",
limits = c(min.close, max.close),
breaks = seq(min.close,max.close,1),
labels = c(min.close,rep("",max.close-min.close-1), max.close)) +
theme( axis.text.x=element_blank(), legend.key.size = unit(0.3, "cm"), axis.text.y=element_blank(),axis.line=element_blank(),axis.ticks.y=element_blank(),
axis.ticks.x=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank(),
plot.title = element_text(size=9), legend.text = element_text(size=9),
legend.title=element_text(size=9),   panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
ggsave("cls_pred.png")
close.actual <- ggplot(b2, aes(INTPTLONG, INTPTLAT)) +
geom_polygon(data = usa, aes(x=long, y = lat, group = group), fill = "grey90")  +
geom_point(size = 0.3, aes(color = binary.close), shape=15) +
ggtitle(paste0("Actual School Closures - ", a1[1])) +
coord_fixed(1.2) + labs(x = "Longitude", y = "Latitude", color = "Index") +
scale_colour_gradient(low = "grey", high="darkblue",
limits = c(0, 1),
breaks = seq(0,1,1),
labels = c(0,1)) +
theme( axis.text.x=element_blank(), legend.key.size = unit(0.3, "cm"), axis.text.y=element_blank(),axis.line=element_blank(),axis.ticks.y=element_blank(),
axis.ticks.x=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank(),
plot.title = element_text(size=9), legend.text = element_text(size=9),
legend.title=element_text(size=9),   panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
ggsave("cls_act.png")
margin = theme(plot.margin = unit(c(0,0,0,0), "cm"))
#Tables
#table(b2$binary.close, b2$stand.pr.avg)
#table(b1$binary.fatal, b1$stand.pr.avg)
fpr.fatal2 <- round(100*sum(b1$binary.fatal==0 & b1$stand.pr.avg > 1)/sum((b1$binary.fatal==0)), 1)
tpr.fatal2 <- round(100*sum(b1$binary.fatal==1 & b1$stand.pr.avg > 1)/sum((b1$binary.fatal==1)), 1)
fpr.close2 <-  round(100*sum(b2$binary.close==0 & b2$stand.pr.avg > 1)/sum((b2$binary.close==0)), 1)
tpr.close2 <-  round(100*sum(b2$binary.close==1 & b2$stand.pr.avg > 1)/sum((b2$binary.close==1)), 1)
#Stitched table
all <- data.frame(case = c("Most Events", "Most Non-Events"),
tpr.close = c(tpr.close1, tpr.close2),
fpr.close = c(fpr.close1, fpr.close2),
tpr.fatal = c(tpr.fatal1, tpr.fatal2),
fpr.fatal = c(fpr.fatal1, fpr.fatal2))
grid.arrange(grobs = lapply(list(close.pred1, close.actual1, close.pred, close.actual, fatal.pred1, fatal.actual1,  fatal.pred, fatal.actual), "+", margin),
ncol = 2, heights=c(1,1,1,1), widths=c(1,1))
split(vec, 10)
vec <- runif(100)
split(vec, 10)
split(vec)
cut(vec, 10)
cut(vec, 10, labels = FALSE)
cut(1:100, 10, labels = FALSE)
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
swirl()
5+8
5+7
load("/Users/jeff/Documents/Github/mccourt2018-hwmk/4/housing_sales_key.Rda")
library(rio)
github.url <- "https://github.com/GeorgetownMcCourt/data-science/blob/master/homework_data/"
file.url <- "housing_sales.Rda.zip?raw=true"
housing <- import(paste0(github.url, file.url))
load("/Users/jeff/Documents/Github/data-science/homework_data/housing_sales.Rda")
load("/Users/jeff/Documents/Github/data-science/homework_data/housing_sales.Rda")
github.url <- "https://github.com/GeorgetownMcCourt/data-science/blob/master/homework_data/"
file.url <- "housing_sales.Rda?raw=true"
housing <- import(paste0(github.url, file.url))
file.url <- "housing_sales.Rds?raw=true"
github.url <- "https://github.com/GeorgetownMcCourt/data-science/blob/master/homework_data/"
file.url <- "housing_sales.Rds?raw=true"
download.file(paste0(github.url, file.url), "temp.Rda")
load("temp.Rda")
github.url <- "https://github.com/GeorgetownMcCourt/data-science/blob/master/homework_data/"
file.url <- "housing_sales.Rda?raw=true"
download.file(paste0(github.url, file.url), "temp.Rda")
load("temp.Rda")
github.url <- "https://github.com/GeorgetownMcCourt/data-science/blob/master/homework_data/"
file.url <- "housing_sales.Rda?raw=true"
download.file(paste0(github.url, file.url), "temp.Rda")
load("temp.Rda")
library(haven)
annual <- read_sas("nyc_mmr.sas7bdat")
str(annual)
library(DT)
datatable(annual[, 1:3])
head(annual, 2)
#Keep two agencies
annual <- annual[annual$agency %in% c("DPR", "DSNY"),]
#Subset rows
annual <- annual[annual$resource_indicators == "Expenditures ($000,000)", -2]
#Extract the to-be headers as a vector
labs <- annual$agency
#Transpose and convert to data frame
annual <- as.data.frame(t(annual[,-1]))
#Rename the columns
colnames(annual) <- labs
head(annual,1)
annual[,1] <- gsub("[\\$|,]","", annual[,1])
annual[,1] <- trimws( annual[,1])
#Create temp object to keep annual clean
temp <- annual
#Loop through each column i, look for value of 1, replace column with position
for(i in 1:ncol(temp)){
temp[,i] <- regexpr("1", temp[,i])
}
for(i in 1:2){
annual[,i] <- 100000*as.numeric(trimws(gsub("[\\$|,]","", annual[,i])))
}
annual <- ts(annual, frequency = 1, start = 2013)
library(openxlsx)
reqs <- read.xlsx("nyc311.xlsx", sheet = 1)
datatable(reqs[1:100, 1:3])
wide <- reshape(reqs,
timevar = "agency",
idvar = "date",
direction = "wide")
#Extract month and year from date
wide$year <- as.numeric(substr(wide$date, 1, 4))
wide$month <- as.numeric(substr(wide$date, 6,7))
wide$quarter <- ceiling(wide$month / 3)
ag <- aggregate(cbind(count.DPR, count.DSNY) ~ year + quarter,
data = wide,
FUN = sum)
ag <- ag[ag$year >= 2013, ]
ag <- ts(ag[,c("count.DPR", "count.DSNY")],
frequency = 4,
start = c(2013, 1))
decomp <- stl(ag[,1], s.window = 7)
plot(decomp)
plot(stl(ag[,2], s.window="period"))
library(seasonal)
install.packages("seasonal")
#Load the data
library(rio)
github.url <- "https://github.com/GeorgetownMcCourt/data-science/blob/master/homework_data/"
file.url <- "housing_sales.Rda?raw=true"
housing <- import(paste0(github.url, file.url))
file.url <- "housing_sales.Rda"
housing <- import(paste0(github.url, file.url))
library(rio)
github.url <- "https://github.com/GeorgetownMcCourt/data-science/blob/master/homework_data/"
file.url <- "housing_sales.Rda?raw=true"
download.file(paste0(github.url, file.url), "temp.Rda")
load("temp.Rda")
library(seasonal)
#Run X13-SEATS and auto-model (default)
seas_nyc <- seas(ag[,2])
#Run X13-SEATS and auto-model (default)
seas_nyc <- seas(ag[,2], forecast ="")
#Run X13-SEATS using an ARIMA(0,1,1)
seas_nyc <- seas(ag[,2], arima.model = "(0 1 1)")
#Run using X11, auto-model,
seas_nyc <- seas(ag[,2], x11 = "",
regression.variables = c("td", "seasonal"),
forecast = "")
#Run using X11
seas_nyc <- seas(ag[,2], x11 = "",
regression.variables = c("td", "seasonal"),
forecast = "")
seas_nyc <- seas(ag[,2])
udg(seas_nyc)
out(seas_nyc)
monthplot(seas_nyc)
monthplot(seas_nyc)
str(seas_nyc)
##Explore the seasonal adjustment output
head(seas_nyc$data,2)
##Extracting the trend
plot(seas_nyc$data[,4], type = "l", col = "red")
lines(seas_nyc$data[,1])
plot(seas_nyc$data[,4], type = "l", col = "red")
lines(seas_nyc$data[,1])
plot(seas_nyc$data[,4], type = "l", col = "red")
lines(seas_nyc$data[,1])
plot(seas_nyc$data[,3], type = "l", col = "red")
plot(seas_nyc$data[,3], type = "l", col = "red")
lines(seas_nyc$data[,1])
plot(seas_nyc$data[,4], type = "l", col = "red")
lines(seas_nyc$data[,1])
plot(seas_nyc$data[,1], type = "l", col = "red")
lines(seas_nyc$data[,4])
#Run X13-SEATS and auto-model (default)
seas_nyc <- seas(ag[,1])
#Run X13-SEATS and auto-model (default)
seas_nyc <- seas(ag[,1], forecast ="")
#Run X13-SEATS using an ARIMA(0,1,1)
seas_nyc <- seas(ag[,1], arima.model = "(0 1 1)")
#Run using X11, auto-model,
seas_nyc <- seas(ag[,1], x11 = "",
regression.variables = c("td", "seasonal"),
forecast = "")
seas_nyc <- seas(ag[,1])
##Explore the seasonal adjustment output
head(seas_nyc$data,2)
##Extracting the trend
plot(seas_nyc$data[,1], type = "l", col = "red")
lines(seas_nyc$data[,4])
plot(seas_nyc$data[,1], type = "l", col = "red")
lines(seas_nyc$data[,4])
plot(seas_nyc$data[,1], type = "l", col = "red")
lines(seas_nyc$data[,4])
seas_nyc <- seas(ag[,1])
##Explore the seasonal adjustment output
head(seas_nyc$data,2)
##Extracting the trend
plot(seas_nyc$data[,1], type = "l", col = "red")
lines(seas_nyc$data[,4])
plot(seas_nyc$data[,4], type = "l", col = "red")
lines(seas_nyc$data[,1])
library(haven)
annual <- read_sas("nyc_mmr.sas7bdat")
str(annual)
library(DT)
datatable(annual[, 1:3])
head(annual, 2)
#Keep two agencies
annual <- annual[annual$agency %in% c("DPR", "DSNY"),]
#Subset rows
annual <- annual[annual$resource_indicators == "Expenditures ($000,000)", -2]
#Extract the to-be headers as a vector
labs <- annual$agency
#Transpose and convert to data frame
annual <- as.data.frame(t(annual[,-1]))
#Rename the columns
colnames(annual) <- labs
head(annual,1)
annual[,1] <- gsub("[\\$|,]","", annual[,1])
annual[,1] <- trimws( annual[,1])
#Create temp object to keep annual clean
temp <- annual
#Loop through each column i, look for value of 1, replace column with position
for(i in 1:ncol(temp)){
temp[,i] <- regexpr("1", temp[,i])
}
for(i in 1:2){
annual[,i] <- 100000*as.numeric(trimws(gsub("[\\$|,]","", annual[,i])))
}
annual <- ts(annual, frequency = 1, start = 2013)
library(openxlsx)
reqs <- read.xlsx("nyc311.xlsx", sheet = 1)
datatable(reqs[1:100, 1:3])
wide <- reshape(reqs,
timevar = "agency",
idvar = "date",
direction = "wide")
#Extract month and year from date
wide$year <- as.numeric(substr(wide$date, 1, 4))
wide$month <- as.numeric(substr(wide$date, 6,7))
wide$quarter <- ceiling(wide$month / 3)
ag <- aggregate(cbind(count.DPR, count.DSNY) ~ year + quarter,
data = wide,
FUN = sum)
ag <- ag[ag$year >= 2013, ]
ag <- ts(ag[,c("count.DPR", "count.DSNY")],
frequency = 4,
start = c(2013, 1))
decomp <- stl(ag[,1], s.window = 7)
plot(decomp)
plot(stl(ag[,2], s.window="period"))
library(seasonal)
Sys.setenv(X13_PATH = "//Serv03cl/Data/APPS/R/Libraries/x13binary/bin")
seas_nyc <- seas(ag[,1])
library(haven)
annual <- read_sas("nyc_mmr.sas7bdat")
str(annual)
library(DT)
datatable(annual[, 1:3])
head(annual, 2)
#Keep two agencies
annual <- annual[annual$agency %in% c("DPR", "DSNY"),]
#Subset rows
annual <- annual[annual$resource_indicators == "Expenditures ($000,000)", -2]
#Extract the to-be headers as a vector
labs <- annual$agency
#Transpose and convert to data frame
annual <- as.data.frame(t(annual[,-1]))
#Rename the columns
colnames(annual) <- labs
head(annual,1)
annual[,1] <- gsub("[\\$|,]","", annual[,1])
annual[,1] <- trimws( annual[,1])
#Create temp object to keep annual clean
temp <- annual
#Loop through each column i, look for value of 1, replace column with position
for(i in 1:ncol(temp)){
temp[,i] <- regexpr("1", temp[,i])
}
for(i in 1:2){
annual[,i] <- 100000*as.numeric(trimws(gsub("[\\$|,]","", annual[,i])))
}
annual <- ts(annual, frequency = 1, start = 2013)
library(openxlsx)
reqs <- read.xlsx("nyc311.xlsx", sheet = 1)
datatable(reqs[1:100, 1:3])
wide <- reshape(reqs,
timevar = "agency",
idvar = "date",
direction = "wide")
#Extract month and year from date
wide$year <- as.numeric(substr(wide$date, 1, 4))
wide$month <- as.numeric(substr(wide$date, 6,7))
wide$quarter <- ceiling(wide$month / 3)
ag <- aggregate(cbind(count.DPR, count.DSNY) ~ year + quarter,
data = wide,
FUN = sum)
ag <- ag[ag$year >= 2013, ]
ag <- ts(ag[,c("count.DPR", "count.DSNY")],
frequency = 4,
start = c(2013, 1))
decomp <- stl(ag[,1], s.window = 7)
plot(decomp)
plot(stl(ag[,2], s.window="period"))
plot(seas_nyc$data[,4], type = "l", col = "red")
lines(seas_nyc$data[,1])
library(seasonal)
#Run X13-SEATS and auto-model (default)
seas_nyc <- seas(ag[,1])
